Longest Subarray with Majority Greater than K
Solution:
class Solution:
    def longestSubarray(self, arr, k):
        # Convert arr into +1 for >k and -1 for <=k
        vals = [1 if x > k else -1 for x in arr]
        
        prefix_sum = 0
        first_occurrence = {0: -1}  # prefix_sum : first index
        max_len = 0
        
        for i, v in enumerate(vals):
            prefix_sum += v
            
            # if prefix_sum > 0, whole subarray from 0 to i is valid
            if prefix_sum > 0:
                max_len = i + 1
            else:
                # we want prefix_sum - target > 0 â‡’ prefix_sum - 1 >= 0
                if prefix_sum - 1 in first_occurrence:
                    max_len = max(max_len, i - first_occurrence[prefix_sum - 1])
            
            # store first occurrence of this prefix_sum
            if prefix_sum not in first_occurrence:
                first_occurrence[prefix_sum] = i
        
        return max_len
